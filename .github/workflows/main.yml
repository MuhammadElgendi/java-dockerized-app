name: CI/CD Pipeline

on:
  push:
    branches:
      - Develop
      - Master

env:
  AWS_REGION: us-west-1
  ECR_REPOSITORY_URI: 910397400061.dkr.ecr.us-west-1.amazonaws.com/vodafone-ecr-repo
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  CLUSTER_NAME: my-cluster

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY_URI }}
            
            # echo ${{ secrets.AWS_ACCESS_KEY_ID }} | docker login -u AWS --password-stdin ${{ env.ECR_REPOSITORY_URI }}

      - name: Build and push Docker image
        run: |
          docker build -t my-app .
          docker tag my-app:latest ${{ env.ECR_REPOSITORY_URI }}:latest
          docker push ${{ env.ECR_REPOSITORY_URI }}:latest

  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/Develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Dev ECS Service
        run: |
          aws ecs update-service --cluster ${{ env.CLUSTER_NAME }} --service dev-service --force-new-deployment

  deploy-to-test:
    runs-on: ubuntu-latest
    needs: deploy-to-dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Test ECS Service
        run: |
          aws ecs update-service --cluster ${{ env.CLUSTER_NAME }} --service test-service --force-new-deployment

  deploy-to-stg:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/Master'
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Staging ECS Service
        run: |
          aws ecs update-service --cluster ${{ env.CLUSTER_NAME }} --service staging-service --force-new-deployment
